package com.hwk.qqclient.service;import com.hwk.qqcommon.Message;import com.hwk.qqcommon.MessageType;import com.hwk.qqcommon.User;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.net.InetAddress;import java.net.Socket;//登录处理的public class UserClientService {    private User user1 = new User();    private Socket socket;    public  boolean checkedUser(String name,String pwd) throws Exception{        boolean b =false;        user1.setUserId(name);        user1.setPasswd(pwd);        socket = new Socket(InetAddress.getByName("127.0.0.1"), 9990);        //发送用户信息给服务器        ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());        oos.writeObject(user1);        //读取服务器的信息        ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());        Message mes = (Message) ois.readObject();        //判断服务器发送的信息的类型，是MESSAGE_LONG_SUCCESS就登录成功        if(mes.getMesType().equals(MessageType.MESSAGE_LONG_SUCCESS)){            //创建自定义线程            clientContentServerThread ccst = new clientContentServerThread(socket);            ccst.start();            //放入线程池，为了多线程            b = true;            ManageClientConnectServe.addClentConnetServierThread(name,ccst);        }        else{            //登录不成功关闭主线程的套字节            socket.close();        }        //返回是否登录成功        return b;    }    //向服务端获取在线用户的列表    public void onlineFreindList() throws Exception{        Message mes = new Message();        //设置请求类型        mes.setMesType(MessageType.MESSAGE_GET_ONLINE_FRIEND);        //说明发送者        mes.setSender(user1.getUserId());        try {            //客户端也可以开启多个线程，所有不能直接用socket，取得当前线程的读取流            ObjectOutputStream oos = new ObjectOutputStream(ManageClientConnectServe.getclientContentServerThread(user1.getUserId()).getSocket().getOutputStream());            oos.writeObject(mes);//发送要用户请求        } catch (IOException e) {            e.printStackTrace();        }    }    //通知服务端退出系统    public void logout(){        Message mes = new Message();        mes.setMesType(MessageType.MESSAGE_CLIENT_EXIT);        mes.setSender(user1.getUserId());        try {            ObjectOutputStream oos = new ObjectOutputStream(ManageClientConnectServe.getclientContentServerThread(user1.getUserId()).getSocket().getOutputStream());            oos.writeObject(mes);            System.out.println(user1.getUserId()+"退出系统了");            System.exit(0);        } catch (IOException e) {            e.printStackTrace();        } finally {        }    }}